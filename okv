#!/usr/bin/env python

##################################################################
# OpenKeyval command line interface!
# Here are some example calls:
# okv set -k someKey -v someVal
# okv del -k someKey 
# okv get -k someKey 
##################################################################

import sys, os
from optparse import OptionParser
from pyopenkeyval.pyopenkeyval import pyopenkeyval

def run():
  # Usage message for --help or errors
  usage = "Usage: %prog [set|get|del] [args]"

  # Get the values from the command line.
  parser = OptionParser(usage=usage)
  options = parse_arguments(parser)

  # Get the key prefix 
  prefix = get_key_prefix(options, parser)

  # Exit out if operation not provided
  if len(sys.argv) < 2:
    parser.error("No operation was provided. Run `okv --help` for more info.")
    exit(1)

  operation = sys.argv[1]

  if operation == 'set': 
    execute_set(options, parser)
  elif operation == 'get':
    execute_get(options, parser)
  elif operation == 'del':
    execute_del(options, parser)
  else:
    parser.error("Incorrect operation provided.")

# Set command line parser options
def parse_arguments(parser):
  parser.add_option("-k", "--key", dest="key", help="Key")
  parser.add_option("-v", "--value", dest="value", help="Value")
  parser.add_option("-n", "--no-prefix", action="store_true", dest="noPrefix", 
      help="Do not use the prefix from the OKV_PREFIX environment variable")

  (options, args) = parser.parse_args(sys.argv)
  return options

# Validate and execute the get operation
def execute_get(options, parser):
  okv = pyopenkeyval()
  print(okv[options.key])

# Validate and execute the set operation
def execute_set(options, parser):
  if options.value == None:
    parser.error("Value requried")
    exit(1)
  okv = pyopenkeyval()
  okv[options.key] = options.value

# Validate and execute the del operation
def execute_del(options, parser):
  okv = pyopenkeyval()
  del okv[options.key]


# Get the key prefix
def get_key_prefix(options, parser):
   # If the user specified to not use a prefix, prepand an empty string
   # to the key. Otherwise, attempt to prepend the OKV_PREFIX environment
   # variable to the key
   if options.noPrefix:
   	 options.key = "" + options.key
   else:
     if "OKV_PREFIX" in os.environ.keys():
       options.key = os.environ["OKV_PREFIX"] + "_" +  options.key 
     else:
     	 print("OKV_PREFIX environment variable not found but -n not passed")
     	 exit(1)

if __name__ == "__main__":
	run()

